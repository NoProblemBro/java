/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 4681.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 3.0], [3.4, 3.0], [3.5, 3.0], [3.6, 3.0], [3.7, 3.0], [3.8, 4.0], [3.9, 4.0], [4.0, 4.0], [4.1, 4.0], [4.2, 4.0], [4.3, 5.0], [4.4, 5.0], [4.5, 5.0], [4.6, 5.0], [4.7, 5.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 7.0], [5.5, 7.0], [5.6, 7.0], [5.7, 7.0], [5.8, 7.0], [5.9, 7.0], [6.0, 7.0], [6.1, 8.0], [6.2, 8.0], [6.3, 8.0], [6.4, 8.0], [6.5, 8.0], [6.6, 8.0], [6.7, 8.0], [6.8, 8.0], [6.9, 8.0], [7.0, 9.0], [7.1, 9.0], [7.2, 9.0], [7.3, 9.0], [7.4, 9.0], [7.5, 9.0], [7.6, 9.0], [7.7, 9.0], [7.8, 9.0], [7.9, 9.0], [8.0, 9.0], [8.1, 9.0], [8.2, 9.0], [8.3, 10.0], [8.4, 10.0], [8.5, 10.0], [8.6, 10.0], [8.7, 10.0], [8.8, 10.0], [8.9, 10.0], [9.0, 10.0], [9.1, 10.0], [9.2, 10.0], [9.3, 10.0], [9.4, 10.0], [9.5, 10.0], [9.6, 11.0], [9.7, 11.0], [9.8, 11.0], [9.9, 11.0], [10.0, 11.0], [10.1, 11.0], [10.2, 12.0], [10.3, 12.0], [10.4, 12.0], [10.5, 12.0], [10.6, 13.0], [10.7, 13.0], [10.8, 13.0], [10.9, 14.0], [11.0, 14.0], [11.1, 15.0], [11.2, 15.0], [11.3, 16.0], [11.4, 16.0], [11.5, 17.0], [11.6, 17.0], [11.7, 18.0], [11.8, 18.0], [11.9, 19.0], [12.0, 19.0], [12.1, 20.0], [12.2, 21.0], [12.3, 21.0], [12.4, 22.0], [12.5, 22.0], [12.6, 23.0], [12.7, 24.0], [12.8, 25.0], [12.9, 25.0], [13.0, 26.0], [13.1, 26.0], [13.2, 26.0], [13.3, 27.0], [13.4, 27.0], [13.5, 28.0], [13.6, 29.0], [13.7, 29.0], [13.8, 30.0], [13.9, 31.0], [14.0, 32.0], [14.1, 33.0], [14.2, 34.0], [14.3, 35.0], [14.4, 37.0], [14.5, 39.0], [14.6, 40.0], [14.7, 41.0], [14.8, 43.0], [14.9, 44.0], [15.0, 45.0], [15.1, 45.0], [15.2, 45.0], [15.3, 46.0], [15.4, 46.0], [15.5, 46.0], [15.6, 47.0], [15.7, 48.0], [15.8, 48.0], [15.9, 49.0], [16.0, 49.0], [16.1, 50.0], [16.2, 50.0], [16.3, 51.0], [16.4, 52.0], [16.5, 54.0], [16.6, 55.0], [16.7, 56.0], [16.8, 58.0], [16.9, 60.0], [17.0, 62.0], [17.1, 67.0], [17.2, 70.0], [17.3, 73.0], [17.4, 77.0], [17.5, 87.0], [17.6, 103.0], [17.7, 104.0], [17.8, 104.0], [17.9, 105.0], [18.0, 106.0], [18.1, 106.0], [18.2, 107.0], [18.3, 107.0], [18.4, 108.0], [18.5, 109.0], [18.6, 110.0], [18.7, 111.0], [18.8, 111.0], [18.9, 111.0], [19.0, 112.0], [19.1, 113.0], [19.2, 113.0], [19.3, 114.0], [19.4, 114.0], [19.5, 115.0], [19.6, 115.0], [19.7, 116.0], [19.8, 118.0], [19.9, 119.0], [20.0, 120.0], [20.1, 122.0], [20.2, 125.0], [20.3, 128.0], [20.4, 129.0], [20.5, 130.0], [20.6, 130.0], [20.7, 131.0], [20.8, 132.0], [20.9, 132.0], [21.0, 133.0], [21.1, 134.0], [21.2, 135.0], [21.3, 137.0], [21.4, 137.0], [21.5, 138.0], [21.6, 138.0], [21.7, 139.0], [21.8, 139.0], [21.9, 139.0], [22.0, 140.0], [22.1, 140.0], [22.2, 141.0], [22.3, 142.0], [22.4, 144.0], [22.5, 151.0], [22.6, 156.0], [22.7, 160.0], [22.8, 196.0], [22.9, 223.0], [23.0, 223.0], [23.1, 225.0], [23.2, 240.0], [23.3, 240.0], [23.4, 241.0], [23.5, 241.0], [23.6, 242.0], [23.7, 242.0], [23.8, 243.0], [23.9, 243.0], [24.0, 243.0], [24.1, 244.0], [24.2, 244.0], [24.3, 245.0], [24.4, 246.0], [24.5, 248.0], [24.6, 251.0], [24.7, 253.0], [24.8, 253.0], [24.9, 254.0], [25.0, 255.0], [25.1, 262.0], [25.2, 271.0], [25.3, 288.0], [25.4, 292.0], [25.5, 293.0], [25.6, 293.0], [25.7, 294.0], [25.8, 295.0], [25.9, 297.0], [26.0, 297.0], [26.1, 298.0], [26.2, 298.0], [26.3, 298.0], [26.4, 299.0], [26.5, 300.0], [26.6, 300.0], [26.7, 301.0], [26.8, 301.0], [26.9, 301.0], [27.0, 302.0], [27.1, 302.0], [27.2, 302.0], [27.3, 303.0], [27.4, 303.0], [27.5, 303.0], [27.6, 303.0], [27.7, 304.0], [27.8, 304.0], [27.9, 305.0], [28.0, 305.0], [28.1, 306.0], [28.2, 306.0], [28.3, 306.0], [28.4, 306.0], [28.5, 307.0], [28.6, 307.0], [28.7, 307.0], [28.8, 308.0], [28.9, 308.0], [29.0, 309.0], [29.1, 309.0], [29.2, 310.0], [29.3, 310.0], [29.4, 310.0], [29.5, 310.0], [29.6, 311.0], [29.7, 312.0], [29.8, 313.0], [29.9, 314.0], [30.0, 315.0], [30.1, 317.0], [30.2, 319.0], [30.3, 319.0], [30.4, 320.0], [30.5, 321.0], [30.6, 321.0], [30.7, 321.0], [30.8, 322.0], [30.9, 322.0], [31.0, 323.0], [31.1, 323.0], [31.2, 324.0], [31.3, 324.0], [31.4, 325.0], [31.5, 325.0], [31.6, 325.0], [31.7, 325.0], [31.8, 325.0], [31.9, 325.0], [32.0, 326.0], [32.1, 326.0], [32.2, 326.0], [32.3, 326.0], [32.4, 326.0], [32.5, 326.0], [32.6, 326.0], [32.7, 327.0], [32.8, 327.0], [32.9, 327.0], [33.0, 327.0], [33.1, 327.0], [33.2, 327.0], [33.3, 327.0], [33.4, 327.0], [33.5, 328.0], [33.6, 328.0], [33.7, 328.0], [33.8, 328.0], [33.9, 328.0], [34.0, 328.0], [34.1, 329.0], [34.2, 329.0], [34.3, 329.0], [34.4, 329.0], [34.5, 330.0], [34.6, 330.0], [34.7, 331.0], [34.8, 331.0], [34.9, 332.0], [35.0, 333.0], [35.1, 337.0], [35.2, 338.0], [35.3, 339.0], [35.4, 339.0], [35.5, 339.0], [35.6, 340.0], [35.7, 340.0], [35.8, 340.0], [35.9, 341.0], [36.0, 341.0], [36.1, 342.0], [36.2, 342.0], [36.3, 344.0], [36.4, 345.0], [36.5, 349.0], [36.6, 351.0], [36.7, 352.0], [36.8, 353.0], [36.9, 355.0], [37.0, 355.0], [37.1, 356.0], [37.2, 357.0], [37.3, 359.0], [37.4, 360.0], [37.5, 363.0], [37.6, 365.0], [37.7, 367.0], [37.8, 368.0], [37.9, 369.0], [38.0, 370.0], [38.1, 371.0], [38.2, 372.0], [38.3, 374.0], [38.4, 376.0], [38.5, 377.0], [38.6, 379.0], [38.7, 380.0], [38.8, 381.0], [38.9, 381.0], [39.0, 381.0], [39.1, 382.0], [39.2, 382.0], [39.3, 382.0], [39.4, 383.0], [39.5, 383.0], [39.6, 383.0], [39.7, 384.0], [39.8, 384.0], [39.9, 384.0], [40.0, 385.0], [40.1, 385.0], [40.2, 385.0], [40.3, 386.0], [40.4, 386.0], [40.5, 386.0], [40.6, 386.0], [40.7, 386.0], [40.8, 387.0], [40.9, 390.0], [41.0, 391.0], [41.1, 392.0], [41.2, 393.0], [41.3, 394.0], [41.4, 394.0], [41.5, 394.0], [41.6, 395.0], [41.7, 395.0], [41.8, 396.0], [41.9, 398.0], [42.0, 399.0], [42.1, 401.0], [42.2, 401.0], [42.3, 402.0], [42.4, 402.0], [42.5, 403.0], [42.6, 403.0], [42.7, 404.0], [42.8, 404.0], [42.9, 404.0], [43.0, 405.0], [43.1, 405.0], [43.2, 405.0], [43.3, 406.0], [43.4, 406.0], [43.5, 406.0], [43.6, 406.0], [43.7, 407.0], [43.8, 407.0], [43.9, 407.0], [44.0, 407.0], [44.1, 407.0], [44.2, 408.0], [44.3, 408.0], [44.4, 408.0], [44.5, 409.0], [44.6, 409.0], [44.7, 410.0], [44.8, 410.0], [44.9, 410.0], [45.0, 411.0], [45.1, 411.0], [45.2, 411.0], [45.3, 411.0], [45.4, 411.0], [45.5, 411.0], [45.6, 412.0], [45.7, 412.0], [45.8, 412.0], [45.9, 412.0], [46.0, 412.0], [46.1, 413.0], [46.2, 413.0], [46.3, 413.0], [46.4, 414.0], [46.5, 414.0], [46.6, 415.0], [46.7, 415.0], [46.8, 415.0], [46.9, 415.0], [47.0, 416.0], [47.1, 416.0], [47.2, 417.0], [47.3, 417.0], [47.4, 417.0], [47.5, 418.0], [47.6, 418.0], [47.7, 419.0], [47.8, 419.0], [47.9, 419.0], [48.0, 420.0], [48.1, 420.0], [48.2, 420.0], [48.3, 421.0], [48.4, 421.0], [48.5, 421.0], [48.6, 421.0], [48.7, 421.0], [48.8, 422.0], [48.9, 422.0], [49.0, 422.0], [49.1, 422.0], [49.2, 422.0], [49.3, 422.0], [49.4, 423.0], [49.5, 423.0], [49.6, 423.0], [49.7, 423.0], [49.8, 423.0], [49.9, 423.0], [50.0, 424.0], [50.1, 424.0], [50.2, 424.0], [50.3, 424.0], [50.4, 424.0], [50.5, 424.0], [50.6, 424.0], [50.7, 425.0], [50.8, 425.0], [50.9, 425.0], [51.0, 425.0], [51.1, 425.0], [51.2, 426.0], [51.3, 426.0], [51.4, 426.0], [51.5, 426.0], [51.6, 427.0], [51.7, 427.0], [51.8, 427.0], [51.9, 427.0], [52.0, 428.0], [52.1, 428.0], [52.2, 428.0], [52.3, 428.0], [52.4, 429.0], [52.5, 429.0], [52.6, 430.0], [52.7, 430.0], [52.8, 430.0], [52.9, 431.0], [53.0, 431.0], [53.1, 432.0], [53.2, 433.0], [53.3, 433.0], [53.4, 434.0], [53.5, 435.0], [53.6, 436.0], [53.7, 437.0], [53.8, 438.0], [53.9, 438.0], [54.0, 439.0], [54.1, 440.0], [54.2, 441.0], [54.3, 443.0], [54.4, 443.0], [54.5, 445.0], [54.6, 445.0], [54.7, 446.0], [54.8, 446.0], [54.9, 447.0], [55.0, 448.0], [55.1, 449.0], [55.2, 449.0], [55.3, 450.0], [55.4, 451.0], [55.5, 451.0], [55.6, 452.0], [55.7, 452.0], [55.8, 453.0], [55.9, 453.0], [56.0, 454.0], [56.1, 454.0], [56.2, 454.0], [56.3, 454.0], [56.4, 455.0], [56.5, 455.0], [56.6, 456.0], [56.7, 456.0], [56.8, 456.0], [56.9, 457.0], [57.0, 459.0], [57.1, 459.0], [57.2, 460.0], [57.3, 460.0], [57.4, 461.0], [57.5, 462.0], [57.6, 462.0], [57.7, 462.0], [57.8, 462.0], [57.9, 463.0], [58.0, 463.0], [58.1, 464.0], [58.2, 464.0], [58.3, 464.0], [58.4, 465.0], [58.5, 465.0], [58.6, 466.0], [58.7, 467.0], [58.8, 467.0], [58.9, 467.0], [59.0, 468.0], [59.1, 468.0], [59.2, 468.0], [59.3, 468.0], [59.4, 468.0], [59.5, 468.0], [59.6, 468.0], [59.7, 469.0], [59.8, 469.0], [59.9, 469.0], [60.0, 469.0], [60.1, 469.0], [60.2, 470.0], [60.3, 472.0], [60.4, 473.0], [60.5, 474.0], [60.6, 475.0], [60.7, 477.0], [60.8, 479.0], [60.9, 479.0], [61.0, 479.0], [61.1, 479.0], [61.2, 480.0], [61.3, 480.0], [61.4, 480.0], [61.5, 480.0], [61.6, 481.0], [61.7, 482.0], [61.8, 482.0], [61.9, 482.0], [62.0, 483.0], [62.1, 483.0], [62.2, 483.0], [62.3, 484.0], [62.4, 484.0], [62.5, 484.0], [62.6, 484.0], [62.7, 484.0], [62.8, 485.0], [62.9, 485.0], [63.0, 486.0], [63.1, 488.0], [63.2, 488.0], [63.3, 488.0], [63.4, 489.0], [63.5, 489.0], [63.6, 490.0], [63.7, 491.0], [63.8, 491.0], [63.9, 492.0], [64.0, 492.0], [64.1, 492.0], [64.2, 492.0], [64.3, 492.0], [64.4, 492.0], [64.5, 493.0], [64.6, 493.0], [64.7, 493.0], [64.8, 494.0], [64.9, 494.0], [65.0, 495.0], [65.1, 496.0], [65.2, 496.0], [65.3, 497.0], [65.4, 497.0], [65.5, 498.0], [65.6, 499.0], [65.7, 499.0], [65.8, 500.0], [65.9, 500.0], [66.0, 501.0], [66.1, 502.0], [66.2, 503.0], [66.3, 504.0], [66.4, 504.0], [66.5, 504.0], [66.6, 505.0], [66.7, 505.0], [66.8, 505.0], [66.9, 506.0], [67.0, 507.0], [67.1, 507.0], [67.2, 508.0], [67.3, 508.0], [67.4, 509.0], [67.5, 509.0], [67.6, 509.0], [67.7, 509.0], [67.8, 510.0], [67.9, 510.0], [68.0, 510.0], [68.1, 510.0], [68.2, 510.0], [68.3, 510.0], [68.4, 511.0], [68.5, 511.0], [68.6, 511.0], [68.7, 511.0], [68.8, 512.0], [68.9, 512.0], [69.0, 512.0], [69.1, 512.0], [69.2, 512.0], [69.3, 513.0], [69.4, 513.0], [69.5, 514.0], [69.6, 514.0], [69.7, 515.0], [69.8, 516.0], [69.9, 516.0], [70.0, 517.0], [70.1, 517.0], [70.2, 519.0], [70.3, 522.0], [70.4, 526.0], [70.5, 527.0], [70.6, 527.0], [70.7, 528.0], [70.8, 528.0], [70.9, 528.0], [71.0, 528.0], [71.1, 529.0], [71.2, 529.0], [71.3, 529.0], [71.4, 530.0], [71.5, 530.0], [71.6, 530.0], [71.7, 531.0], [71.8, 531.0], [71.9, 531.0], [72.0, 532.0], [72.1, 532.0], [72.2, 533.0], [72.3, 535.0], [72.4, 536.0], [72.5, 537.0], [72.6, 537.0], [72.7, 538.0], [72.8, 538.0], [72.9, 539.0], [73.0, 540.0], [73.1, 540.0], [73.2, 541.0], [73.3, 541.0], [73.4, 541.0], [73.5, 542.0], [73.6, 542.0], [73.7, 542.0], [73.8, 542.0], [73.9, 543.0], [74.0, 544.0], [74.1, 545.0], [74.2, 545.0], [74.3, 546.0], [74.4, 546.0], [74.5, 546.0], [74.6, 547.0], [74.7, 547.0], [74.8, 548.0], [74.9, 548.0], [75.0, 548.0], [75.1, 549.0], [75.2, 549.0], [75.3, 549.0], [75.4, 550.0], [75.5, 550.0], [75.6, 550.0], [75.7, 551.0], [75.8, 552.0], [75.9, 554.0], [76.0, 556.0], [76.1, 558.0], [76.2, 559.0], [76.3, 561.0], [76.4, 562.0], [76.5, 563.0], [76.6, 565.0], [76.7, 567.0], [76.8, 568.0], [76.9, 571.0], [77.0, 578.0], [77.1, 580.0], [77.2, 584.0], [77.3, 588.0], [77.4, 593.0], [77.5, 600.0], [77.6, 601.0], [77.7, 602.0], [77.8, 602.0], [77.9, 602.0], [78.0, 603.0], [78.1, 603.0], [78.2, 603.0], [78.3, 603.0], [78.4, 603.0], [78.5, 603.0], [78.6, 604.0], [78.7, 609.0], [78.8, 616.0], [78.9, 635.0], [79.0, 639.0], [79.1, 640.0], [79.2, 641.0], [79.3, 647.0], [79.4, 649.0], [79.5, 650.0], [79.6, 651.0], [79.7, 652.0], [79.8, 652.0], [79.9, 653.0], [80.0, 653.0], [80.1, 654.0], [80.2, 654.0], [80.3, 655.0], [80.4, 656.0], [80.5, 657.0], [80.6, 659.0], [80.7, 660.0], [80.8, 661.0], [80.9, 662.0], [81.0, 662.0], [81.1, 663.0], [81.2, 663.0], [81.3, 665.0], [81.4, 666.0], [81.5, 668.0], [81.6, 668.0], [81.7, 670.0], [81.8, 672.0], [81.9, 674.0], [82.0, 684.0], [82.1, 685.0], [82.2, 690.0], [82.3, 691.0], [82.4, 694.0], [82.5, 695.0], [82.6, 698.0], [82.7, 706.0], [82.8, 706.0], [82.9, 710.0], [83.0, 726.0], [83.1, 736.0], [83.2, 750.0], [83.3, 752.0], [83.4, 753.0], [83.5, 753.0], [83.6, 754.0], [83.7, 755.0], [83.8, 755.0], [83.9, 757.0], [84.0, 762.0], [84.1, 774.0], [84.2, 791.0], [84.3, 792.0], [84.4, 793.0], [84.5, 793.0], [84.6, 793.0], [84.7, 793.0], [84.8, 794.0], [84.9, 795.0], [85.0, 796.0], [85.1, 796.0], [85.2, 798.0], [85.3, 801.0], [85.4, 803.0], [85.5, 810.0], [85.6, 825.0], [85.7, 828.0], [85.8, 829.0], [85.9, 830.0], [86.0, 830.0], [86.1, 832.0], [86.2, 840.0], [86.3, 841.0], [86.4, 842.0], [86.5, 845.0], [86.6, 855.0], [86.7, 866.0], [86.8, 877.0], [86.9, 892.0], [87.0, 896.0], [87.1, 907.0], [87.2, 914.0], [87.3, 921.0], [87.4, 942.0], [87.5, 957.0], [87.6, 982.0], [87.7, 1031.0], [87.8, 1051.0], [87.9, 1070.0], [88.0, 1081.0], [88.1, 1103.0], [88.2, 1114.0], [88.3, 1126.0], [88.4, 1145.0], [88.5, 1167.0], [88.6, 1181.0], [88.7, 1197.0], [88.8, 1215.0], [88.9, 1222.0], [89.0, 1235.0], [89.1, 1239.0], [89.2, 1245.0], [89.3, 1252.0], [89.4, 1258.0], [89.5, 1267.0], [89.6, 1269.0], [89.7, 1277.0], [89.8, 1284.0], [89.9, 1290.0], [90.0, 1295.0], [90.1, 1300.0], [90.2, 1305.0], [90.3, 1308.0], [90.4, 1311.0], [90.5, 1315.0], [90.6, 1318.0], [90.7, 1323.0], [90.8, 1326.0], [90.9, 1329.0], [91.0, 1334.0], [91.1, 1340.0], [91.2, 1345.0], [91.3, 1349.0], [91.4, 1353.0], [91.5, 1356.0], [91.6, 1360.0], [91.7, 1363.0], [91.8, 1367.0], [91.9, 1371.0], [92.0, 1374.0], [92.1, 1378.0], [92.2, 1385.0], [92.3, 1392.0], [92.4, 1395.0], [92.5, 1416.0], [92.6, 1454.0], [92.7, 1460.0], [92.8, 1468.0], [92.9, 1474.0], [93.0, 1477.0], [93.1, 1481.0], [93.2, 1489.0], [93.3, 1497.0], [93.4, 1503.0], [93.5, 1507.0], [93.6, 1514.0], [93.7, 1521.0], [93.8, 1527.0], [93.9, 1537.0], [94.0, 1548.0], [94.1, 1560.0], [94.2, 1579.0], [94.3, 1623.0], [94.4, 1637.0], [94.5, 1671.0], [94.6, 1741.0], [94.7, 1747.0], [94.8, 1752.0], [94.9, 1755.0], [95.0, 1764.0], [95.1, 1771.0], [95.2, 1805.0], [95.3, 1815.0], [95.4, 1819.0], [95.5, 1825.0], [95.6, 1844.0], [95.7, 1913.0], [95.8, 2053.0], [95.9, 2142.0], [96.0, 2161.0], [96.1, 2228.0], [96.2, 2245.0], [96.3, 2301.0], [96.4, 2314.0], [96.5, 2320.0], [96.6, 2335.0], [96.7, 2360.0], [96.8, 2369.0], [96.9, 2416.0], [97.0, 2437.0], [97.1, 2503.0], [97.2, 2570.0], [97.3, 2601.0], [97.4, 2608.0], [97.5, 2655.0], [97.6, 2697.0], [97.7, 2717.0], [97.8, 2753.0], [97.9, 2759.0], [98.0, 2815.0], [98.1, 2895.0], [98.2, 2973.0], [98.3, 3056.0], [98.4, 3116.0], [98.5, 3145.0], [98.6, 3157.0], [98.7, 3172.0], [98.8, 3198.0], [98.9, 3218.0], [99.0, 3244.0], [99.1, 3253.0], [99.2, 3285.0], [99.3, 3333.0], [99.4, 3377.0], [99.5, 3518.0], [99.6, 3755.0], [99.7, 3964.0], [99.8, 4116.0], [99.9, 4325.0]], "isOverall": false, "label": "example_1", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2435.0, "series": [{"data": [[0.0, 1801.0], [600.0, 532.0], [700.0, 264.0], [800.0, 185.0], [900.0, 63.0], [1000.0, 46.0], [1100.0, 63.0], [1200.0, 141.0], [1300.0, 239.0], [1400.0, 94.0], [1500.0, 91.0], [100.0, 534.0], [1600.0, 29.0], [1700.0, 68.0], [1800.0, 49.0], [1900.0, 12.0], [2000.0, 4.0], [2100.0, 27.0], [2200.0, 21.0], [2300.0, 58.0], [2400.0, 26.0], [2500.0, 18.0], [2600.0, 38.0], [2800.0, 20.0], [2700.0, 28.0], [2900.0, 11.0], [3000.0, 17.0], [3100.0, 43.0], [200.0, 376.0], [3200.0, 45.0], [3300.0, 22.0], [3400.0, 1.0], [3500.0, 4.0], [3600.0, 7.0], [3700.0, 4.0], [3800.0, 4.0], [3900.0, 8.0], [4000.0, 6.0], [4100.0, 1.0], [4200.0, 9.0], [4300.0, 3.0], [4400.0, 2.0], [4500.0, 4.0], [4600.0, 2.0], [300.0, 1591.0], [400.0, 2435.0], [500.0, 1194.0]], "isOverall": false, "label": "example_1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 198.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6642.0, "series": [{"data": [[0.0, 6642.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2716.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 198.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 684.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 807.4975585937475, "minX": 1.57836198E12, "maxY": 807.4975585937475, "series": [{"data": [[1.57836198E12, 807.4975585937475]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57836198E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 3284.0, "series": [{"data": [[3.0, 0.4444444444444444], [4.0, 1.0], [5.0, 0.0], [6.0, 1.0], [7.0, 1.0], [8.0, 1.0], [9.0, 576.75], [10.0, 415.33333333333337], [11.0, 12.000000000000002], [12.0, 27.0], [13.0, 562.7142857142858], [14.0, 450.0], [15.0, 673.8333333333334], [17.0, 449.0], [18.0, 673.5], [19.0, 2.0], [20.0, 1343.0], [21.0, 337.25], [22.0, 708.5], [23.0, 135.5], [24.0, 135.0], [25.0, 505.8571428571429], [26.0, 1.6666666666666667], [27.0, 873.0], [28.0, 1484.5], [29.0, 1519.0], [30.0, 34.0], [33.0, 34.0], [35.0, 633.0], [39.0, 502.0], [38.0, 1.6666666666666667], [41.0, 778.75], [43.0, 204.625], [45.0, 408.625], [44.0, 809.5], [47.0, 591.3333333333333], [46.0, 464.8571428571429], [49.0, 386.80000000000007], [48.0, 590.3333333333333], [51.0, 1197.0], [50.0, 722.1999999999999], [53.0, 1676.3333333333333], [55.0, 2053.0], [54.0, 2045.0], [57.0, 2049.0], [59.0, 532.0], [61.0, 2.0], [63.0, 2132.0], [67.0, 2330.0], [66.0, 2231.0], [65.0, 743.6666666666666], [64.0, 2.0], [71.0, 2226.0], [70.0, 2227.5], [69.0, 1116.0], [68.0, 1200.5], [75.0, 2229.0], [74.0, 2229.0], [73.0, 2231.0], [72.0, 745.0], [78.0, 838.0], [77.0, 87.0], [76.0, 2229.0], [83.0, 1130.5], [82.0, 4.0], [81.0, 2254.0], [80.0, 566.25], [87.0, 1159.0], [86.0, 775.3333333333333], [84.0, 1129.0], [91.0, 2.0], [90.0, 580.0], [89.0, 868.875], [88.0, 3.5], [95.0, 153.0], [94.0, 1.0], [93.0, 78.5], [92.0, 78.875], [99.0, 1235.8571428571427], [98.0, 10.0], [97.0, 1344.9], [96.0, 149.0], [103.0, 1188.25], [101.0, 74.0], [100.0, 74.0], [107.0, 1183.0], [106.0, 1332.2857142857144], [105.0, 2.0], [104.0, 1157.0], [111.0, 24.0], [110.0, 1.0], [109.0, 1564.3333333333333], [108.0, 777.3333333333334], [114.0, 67.0], [113.0, 67.0], [112.0, 68.0], [119.0, 576.25], [118.0, 768.0], [117.0, 833.5], [123.0, 1159.5], [121.0, 1392.8], [120.0, 768.3333333333333], [126.0, 558.2], [125.0, 467.16666666666663], [124.0, 465.0], [135.0, 795.7499999999999], [134.0, 1.5], [133.0, 591.75], [132.0, 525.7777777777778], [130.0, 787.6666666666667], [128.0, 473.4], [143.0, 1.0], [142.0, 588.75], [141.0, 582.75], [139.0, 1038.0], [138.0, 80.99999999999999], [137.0, 2.0], [136.0, 812.3333333333333], [151.0, 1079.9333333333334], [150.0, 879.3333333333333], [149.0, 32.99999999999999], [148.0, 2.0], [147.0, 1.5], [146.0, 1.6666666666666667], [145.0, 804.6666666666667], [144.0, 1191.25], [159.0, 1332.2], [158.0, 761.2857142857142], [157.0, 3.0], [156.0, 2.0], [155.0, 867.3333333333333], [154.0, 3.0], [153.0, 326.99999999999994], [152.0, 4.0], [166.0, 1.5], [165.0, 1.0], [164.0, 807.5999999999999], [163.0, 445.0], [161.0, 885.6666666666667], [160.0, 874.4444444444445], [175.0, 908.6666666666667], [174.0, 1499.6153846153848], [173.0, 520.5], [172.0, 854.1578947368421], [171.0, 60.5], [170.0, 13.6], [169.0, 21.333333333333336], [168.0, 13.8], [183.0, 328.3], [182.0, 880.3157894736842], [181.0, 1.0], [180.0, 391.8571428571429], [179.0, 2653.0], [177.0, 661.0], [176.0, 1.6666666666666667], [191.0, 552.6], [189.0, 689.25], [188.0, 919.0], [187.0, 751.9090909090909], [186.0, 1377.0], [199.0, 61.0], [198.0, 645.0], [197.0, 1.0], [196.0, 485.83333333333337], [195.0, 1279.4285714285713], [194.0, 62.23076923076923], [193.0, 1.1428571428571428], [192.0, 730.75], [207.0, 560.5], [206.0, 63.333333333333336], [205.0, 1618.0], [203.0, 1299.6], [202.0, 1612.75], [201.0, 623.8], [200.0, 1052.6666666666665], [215.0, 3.0], [211.0, 4.0], [208.0, 4.0], [222.0, 2.0], [221.0, 2.0], [219.0, 2.0], [217.0, 3.0], [216.0, 3.0], [230.0, 6.0], [229.0, 4.5], [228.0, 7.5], [239.0, 7.5], [238.0, 8.5], [236.0, 8.666666666666666], [235.0, 7.0], [234.0, 7.0], [233.0, 6.666666666666667], [232.0, 5.833333333333333], [246.0, 8.0], [245.0, 9.0], [243.0, 9.0], [242.0, 10.0], [241.0, 10.0], [240.0, 8.75], [255.0, 8.0], [254.0, 10.0], [253.0, 7.75], [252.0, 7.0], [251.0, 17.0], [250.0, 7.666666666666667], [249.0, 13.0], [248.0, 7.0], [269.0, 9.0], [268.0, 9.75], [267.0, 527.1666666666666], [266.0, 9.0], [265.0, 9.0], [264.0, 9.0], [262.0, 8.8], [260.0, 8.0], [259.0, 9.25], [256.0, 8.5], [286.0, 9.333333333333334], [287.0, 109.0], [285.0, 8.333333333333334], [275.0, 10.5], [274.0, 10.0], [272.0, 10.0], [282.0, 77.0], [281.0, 115.0], [280.0, 10.0], [279.0, 10.0], [278.0, 10.0], [277.0, 10.0], [276.0, 10.0], [301.0, 442.375], [303.0, 105.0], [300.0, 27.454545454545457], [299.0, 685.0000000000001], [298.0, 9.428571428571429], [296.0, 28.8], [294.0, 9.0], [293.0, 9.8], [291.0, 9.666666666666666], [290.0, 10.0], [289.0, 9.0], [288.0, 9.0], [318.0, 718.090909090909], [319.0, 259.0], [316.0, 114.14285714285714], [307.0, 103.0], [306.0, 106.91666666666667], [305.0, 106.28571428571429], [304.0, 109.0], [314.0, 111.0], [313.0, 180.2608695652174], [312.0, 109.77777777777777], [311.0, 104.8], [310.0, 122.33333333333333], [308.0, 109.44444444444444], [335.0, 47.5], [334.0, 46.0], [333.0, 60.55555555555553], [330.0, 3284.0], [326.0, 3282.0], [350.0, 133.5], [351.0, 132.25], [349.0, 876.9999999999999], [348.0, 45.18181818181818], [347.0, 45.0], [346.0, 65.4], [345.0, 408.33333333333337], [344.0, 49.0], [343.0, 47.0], [336.0, 49.22222222222222], [338.0, 48.0], [337.0, 349.0], [342.0, 47.6], [341.0, 47.666666666666664], [340.0, 45.333333333333336], [366.0, 503.62499999999994], [367.0, 118.6], [364.0, 113.72727272727273], [355.0, 130.25], [354.0, 131.0], [353.0, 133.0], [352.0, 132.0], [363.0, 140.20000000000002], [362.0, 138.25], [361.0, 130.0], [360.0, 130.63636363636365], [359.0, 129.0], [357.0, 130.75], [356.0, 130.44444444444446], [382.0, 120.33333333333333], [383.0, 669.6666666666666], [381.0, 898.7500000000001], [380.0, 255.0869565217391], [379.0, 115.8], [378.0, 116.0], [377.0, 115.0], [376.0, 115.0], [375.0, 915.25], [369.0, 113.0], [368.0, 117.0], [371.0, 744.4], [370.0, 114.0], [374.0, 116.5], [373.0, 114.23809523809523], [372.0, 113.5], [398.0, 51.0], [399.0, 82.66666666666667], [397.0, 51.333333333333336], [387.0, 44.25], [386.0, 331.45454545454544], [385.0, 40.90909090909091], [384.0, 41.0], [395.0, 70.5], [394.0, 50.0], [393.0, 79.66666666666667], [392.0, 63.0], [391.0, 47.63636363636364], [390.0, 45.2], [389.0, 45.0], [388.0, 54.07692307692307], [414.0, 132.5], [415.0, 1158.3333333333333], [413.0, 1732.0], [412.0, 133.0], [411.0, 956.25], [410.0, 133.0], [409.0, 131.875], [408.0, 128.0], [407.0, 140.0], [400.0, 128.66666666666666], [403.0, 139.5], [402.0, 137.0], [406.0, 130.0], [405.0, 132.0], [404.0, 128.1818181818182], [419.0, 140.0], [430.0, 141.0], [428.0, 140.0], [418.0, 138.44444444444446], [417.0, 520.0], [416.0, 190.0], [427.0, 140.33333333333334], [426.0, 161.2], [424.0, 142.0], [423.0, 141.0], [422.0, 141.0], [421.0, 140.5], [420.0, 140.33333333333334], [446.0, 239.33333333333334], [447.0, 138.0], [444.0, 139.33333333333334], [435.0, 140.75], [434.0, 138.0], [433.0, 140.0], [432.0, 139.25], [443.0, 139.0], [442.0, 165.81818181818184], [441.0, 137.0], [440.0, 138.0], [438.0, 140.0], [437.0, 142.5], [461.0, 139.0], [460.0, 137.0], [451.0, 140.5], [449.0, 138.25], [448.0, 137.66666666666666], [459.0, 434.0], [458.0, 138.0], [457.0, 138.0], [456.0, 138.75], [455.0, 139.0], [454.0, 139.66666666666666], [453.0, 140.0], [452.0, 141.0], [476.0, 223.0], [478.0, 271.75], [479.0, 223.0], [477.0, 221.0], [475.0, 223.0], [472.0, 221.0], [471.0, 222.0], [465.0, 139.0], [464.0, 139.25], [469.0, 276.0], [468.0, 187.66666666666666], [494.0, 406.5], [495.0, 407.3333333333333], [493.0, 819.3333333333333], [492.0, 329.0], [491.0, 366.5], [490.0, 346.66666666666663], [489.0, 328.16666666666663], [488.0, 328.8333333333333], [487.0, 328.5], [481.0, 224.5], [480.0, 222.5], [483.0, 280.5], [482.0, 224.33333333333334], [486.0, 804.5], [485.0, 294.33333333333337], [484.0, 223.33333333333334], [510.0, 422.6666666666667], [511.0, 422.0], [509.0, 420.4], [508.0, 416.75], [506.0, 420.0], [505.0, 426.3333333333333], [504.0, 419.0], [503.0, 418.0], [496.0, 411.0], [498.0, 414.0], [497.0, 416.7142857142857], [502.0, 417.25], [501.0, 418.8], [500.0, 414.3333333333333], [519.0, 512.0], [531.0, 418.0], [536.0, 487.5], [517.0, 420.0], [516.0, 451.0], [515.0, 420.3333333333333], [514.0, 421.0], [513.0, 422.25], [512.0, 422.0], [535.0, 603.0], [534.0, 1146.75], [532.0, 420.0], [530.0, 419.0], [529.0, 500.0], [527.0, 422.0], [526.0, 449.0], [525.0, 419.0], [524.0, 420.5], [523.0, 419.75], [522.0, 421.25], [521.0, 511.0], [573.0, 420.0], [575.0, 877.3333333333334], [561.0, 424.0], [560.0, 425.0], [563.0, 437.0], [562.0, 1109.75], [571.0, 423.6666666666667], [570.0, 418.0], [569.0, 969.0], [568.0, 420.0], [559.0, 428.0], [551.0, 427.0], [550.0, 352.8], [558.0, 424.6], [557.0, 423.5], [556.0, 423.0], [555.0, 424.0], [554.0, 424.0], [553.0, 423.0], [552.0, 423.0], [567.0, 424.0], [566.0, 421.0], [565.0, 424.0], [564.0, 426.0], [600.0, 426.0], [596.0, 422.0], [606.0, 423.5], [604.0, 1796.0], [602.0, 520.0], [591.0, 425.0], [576.0, 420.2], [579.0, 1339.6666666666665], [578.0, 424.0], [583.0, 423.0], [582.0, 422.0], [590.0, 423.3333333333333], [589.0, 423.0], [588.0, 424.0], [587.0, 425.0], [586.0, 422.3333333333333], [585.0, 422.0], [584.0, 422.0], [599.0, 425.5], [598.0, 422.0], [597.0, 422.6666666666667], [594.0, 422.0], [592.0, 519.5], [633.0, 511.0], [627.0, 527.5], [636.0, 547.2727272727273], [638.0, 604.0], [626.0, 528.6666666666666], [625.0, 510.0], [634.0, 510.63636363636357], [632.0, 544.0], [615.0, 421.0], [614.0, 421.0], [612.0, 446.5], [610.0, 422.3333333333333], [608.0, 470.5], [623.0, 511.0], [622.0, 469.0], [620.0, 425.0], [618.0, 423.5], [617.0, 452.6666666666667], [616.0, 421.0], [631.0, 509.0], [630.0, 535.75], [628.0, 509.5], [664.0, 602.25], [670.0, 602.0], [671.0, 602.0], [657.0, 604.0], [656.0, 602.6666666666666], [669.0, 602.0], [668.0, 602.6666666666666], [666.0, 603.125], [655.0, 602.0], [640.0, 604.0], [643.0, 603.0], [642.0, 1242.25], [647.0, 602.0], [646.0, 605.5], [653.0, 602.75], [652.0, 603.0], [651.0, 603.0], [650.0, 603.2], [649.0, 602.6666666666666], [648.0, 603.0], [663.0, 602.25], [662.0, 602.0], [660.0, 602.5], [659.0, 604.8333333333334], [696.0, 528.5], [702.0, 518.0], [703.0, 1026.8], [701.0, 518.0], [699.0, 1027.0], [698.0, 519.0], [687.0, 600.0], [673.0, 602.4], [672.0, 601.5], [677.0, 604.25], [676.0, 603.0], [679.0, 603.0], [678.0, 603.0], [686.0, 1236.0], [685.0, 603.0], [684.0, 1239.0], [682.0, 603.5], [681.0, 602.5714285714286], [680.0, 603.0], [694.0, 606.2857142857143], [691.0, 600.0], [690.0, 600.0], [688.0, 600.0], [707.0, 1025.4], [716.0, 1428.0], [717.0, 1802.6666666666667], [704.0, 516.5], [706.0, 516.0], [705.0, 516.0], [715.0, 515.4], [714.0, 514.6666666666666], [712.0, 1828.5], [711.0, 516.0], [709.0, 516.6666666666666], [708.0, 516.0], [760.0, 866.8333333333333], [765.0, 410.0], [766.0, 411.3333333333333], [754.0, 411.5], [752.0, 411.0], [763.0, 411.6666666666667], [762.0, 411.5], [761.0, 411.0], [750.0, 411.0], [738.0, 412.0], [737.0, 412.0], [740.0, 412.0], [739.0, 1780.0], [742.0, 411.0], [741.0, 412.0], [749.0, 1096.0], [748.0, 412.3333333333333], [747.0, 412.0], [746.0, 411.3333333333333], [745.0, 411.3333333333333], [758.0, 411.5], [757.0, 410.75], [756.0, 411.5], [755.0, 411.5], [786.0, 329.5], [798.0, 330.0], [799.0, 384.3333333333333], [785.0, 330.0], [796.0, 327.6666666666667], [794.0, 328.0], [792.0, 414.0], [771.0, 407.75], [770.0, 408.0], [769.0, 460.5], [768.0, 596.0333333333332], [783.0, 364.4], [781.0, 330.0], [791.0, 329.3333333333333], [789.0, 329.5], [787.0, 442.3333333333333], [824.0, 425.0], [828.0, 424.0], [830.0, 425.5], [816.0, 368.25], [818.0, 425.0], [817.0, 386.4], [827.0, 426.0], [826.0, 1310.0], [825.0, 425.0], [815.0, 328.0], [802.0, 327.0], [800.0, 327.0], [804.0, 326.0], [803.0, 327.0], [807.0, 326.0], [805.0, 326.0], [814.0, 327.4], [813.0, 327.0], [812.0, 326.5], [810.0, 381.3333333333333], [809.0, 326.0], [808.0, 326.0], [823.0, 425.0], [822.0, 425.0], [821.0, 427.5], [820.0, 425.6666666666667], [860.0, 976.4], [863.0, 640.5625], [848.0, 967.2], [850.0, 419.0], [849.0, 419.5], [853.0, 418.5], [852.0, 420.6666666666667], [862.0, 476.8], [861.0, 474.0], [859.0, 421.6666666666667], [858.0, 428.6666666666667], [857.0, 420.33333333333337], [856.0, 421.0], [847.0, 424.2], [833.0, 426.0], [832.0, 424.0], [835.0, 484.5], [834.0, 424.5], [837.0, 426.5], [836.0, 427.0], [839.0, 424.3333333333333], [838.0, 424.0], [846.0, 424.0], [845.0, 423.6666666666667], [844.0, 423.0], [843.0, 424.0], [842.0, 423.0], [841.0, 425.5], [840.0, 424.0], [855.0, 421.3333333333333], [854.0, 418.0], [870.0, 474.67647058823525], [892.0, 294.0], [894.0, 1712.5], [895.0, 293.22222222222223], [893.0, 294.0], [889.0, 1713.5], [888.0, 295.0], [881.0, 771.0], [880.0, 945.8], [879.0, 435.5], [865.0, 471.3333333333333], [864.0, 659.0], [867.0, 468.0], [866.0, 905.3333333333333], [869.0, 560.0], [868.0, 470.0], [871.0, 534.9499999999999], [878.0, 853.8333333333334], [877.0, 384.0], [876.0, 384.0], [875.0, 657.2380952380953], [874.0, 410.0], [873.0, 385.8235294117647], [872.0, 405.6363636363637], [924.0, 738.1311475409835], [927.0, 589.459807073955], [913.0, 315.5], [912.0, 420.64516129032256], [915.0, 452.6722689075631], [914.0, 315.5714285714286], [917.0, 327.6695652173914], [916.0, 559.0597014925376], [926.0, 631.1029411764706], [925.0, 497.93750000000006], [923.0, 395.40000000000003], [922.0, 341.92857142857144], [921.0, 324.7142857142857], [920.0, 326.44444444444446], [911.0, 407.7777777777777], [897.0, 293.0], [896.0, 294.0], [899.0, 293.0], [898.0, 293.3333333333333], [901.0, 744.9285714285714], [900.0, 1235.6666666666665], [903.0, 439.94603174603185], [902.0, 252.9], [910.0, 980.75], [909.0, 535.7719298245614], [908.0, 383.5], [905.0, 1460.0555555555557], [904.0, 532.7857142857142], [919.0, 496.7258064516125], [918.0, 301.42028985507244], [956.0, 534.2930107526889], [959.0, 682.2173913043479], [945.0, 736.9444444444446], [944.0, 837.5399515738496], [947.0, 652.3333333333334], [946.0, 656.875], [949.0, 569.0833333333334], [948.0, 937.575757575758], [958.0, 531.5454545454545], [957.0, 521.9999999999999], [955.0, 603.0445344129562], [954.0, 654.275], [953.0, 580.3725490196076], [952.0, 483.0], [943.0, 867.3833333333329], [929.0, 657.5441176470588], [928.0, 578.2415730337078], [931.0, 641.5], [930.0, 662.5294117647055], [933.0, 562.0416666666667], [932.0, 451.4193548387097], [935.0, 527.2939068100359], [934.0, 351.86956521739137], [942.0, 844.8125000000001], [941.0, 951.8536585365854], [940.0, 585.4175824175825], [939.0, 556.8181818181819], [938.0, 540.2380952380952], [937.0, 603.4467005076145], [936.0, 570.8936170212766], [951.0, 565.8421052631581], [950.0, 551.1713747645952], [986.0, 9.4], [990.0, 29.0], [991.0, 7.0], [976.0, 195.3], [979.0, 35.833333333333336], [977.0, 42.33333333333333], [981.0, 22.0], [980.0, 156.26315789473682], [989.0, 128.0], [988.0, 10.0], [987.0, 184.30769230769232], [985.0, 100.2], [967.0, 1247.1014799154334], [966.0, 1156.5], [965.0, 1089.3454545454542], [964.0, 1241.271604938272], [963.0, 1467.794871794872], [962.0, 480.0409356725146], [961.0, 928.9509803921569], [960.0, 540.7751937984499], [974.0, 18.0], [973.0, 412.4117647058824], [972.0, 351.11111111111114], [971.0, 419.1428571428571], [970.0, 310.7936507936507], [969.0, 414.0769230769231], [968.0, 204.33333333333334], [983.0, 84.72], [982.0, 102.34285714285716], [1020.0, 175.8], [1023.0, 19.380952380952383], [1008.0, 181.6], [1010.0, 98.21568627450982], [1009.0, 247.57142857142858], [1022.0, 167.1], [1021.0, 85.53846153846153], [1019.0, 9.3125], [1018.0, 482.0], [1017.0, 8.666666666666666], [1016.0, 9.333333333333334], [1007.0, 151.85714285714286], [992.0, 15.583333333333336], [995.0, 335.1666666666667], [993.0, 92.41666666666664], [997.0, 8.333333333333334], [996.0, 22.0], [999.0, 14.333333333333334], [998.0, 73.18749999999999], [1006.0, 18.857142857142858], [1005.0, 27.0], [1004.0, 17.0], [1003.0, 265.25], [1002.0, 115.91228070175436], [1001.0, 102.72727272727272], [1000.0, 231.0], [1015.0, 113.21052631578948], [1014.0, 71.52941176470588], [1013.0, 5.857142857142857], [1011.0, 116.37037037037037], [1024.0, 185.5718309859155], [1.0, 0.0]], "isOverall": false, "label": "example_1", "isController": false}, {"data": [[807.4966796875017, 551.6349609375003]], "isOverall": false, "label": "example_1-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1024.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 30851.266666666666, "minX": 1.57836198E12, "maxY": 35328.0, "series": [{"data": [[1.57836198E12, 30851.266666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57836198E12, 35328.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57836198E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 551.6349609375003, "minX": 1.57836198E12, "maxY": 551.6349609375003, "series": [{"data": [[1.57836198E12, 551.6349609375003]], "isOverall": false, "label": "example_1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57836198E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 551.5561523437505, "minX": 1.57836198E12, "maxY": 551.5561523437505, "series": [{"data": [[1.57836198E12, 551.5561523437505]], "isOverall": false, "label": "example_1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57836198E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 36.63769531250002, "minX": 1.57836198E12, "maxY": 36.63769531250002, "series": [{"data": [[1.57836198E12, 36.63769531250002]], "isOverall": false, "label": "example_1", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57836198E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.57836198E12, "maxY": 1974.0, "series": [{"data": [[1.57836198E12, 1974.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57836198E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57836198E12, 814.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57836198E12, 1740.4300000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57836198E12, 1309.1499999999996]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57836198E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 253.0, "maxY": 3233.0, "series": [{"data": [[1028.0, 12.0], [2048.0, 406.0], [1403.0, 510.0], [1449.0, 1076.0], [1600.0, 542.0], [470.0, 2.0], [1989.0, 223.0], [253.0, 2.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1028.0, 33.0], [2048.0, 3233.0], [1403.0, 2219.0], [1449.0, 1260.5], [1600.0, 2698.0], [470.0, 2600.0], [1989.0, 3140.0], [253.0, 1764.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2048.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2.0, "minX": 253.0, "maxY": 3233.0, "series": [{"data": [[1028.0, 12.0], [2048.0, 406.0], [1403.0, 510.0], [1449.0, 1076.0], [1600.0, 542.0], [470.0, 2.0], [1989.0, 223.0], [253.0, 2.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1028.0, 32.0], [2048.0, 3233.0], [1403.0, 2219.0], [1449.0, 1260.0], [1600.0, 2698.0], [470.0, 2600.0], [1989.0, 3140.0], [253.0, 1764.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2048.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 170.66666666666666, "minX": 1.57836198E12, "maxY": 170.66666666666666, "series": [{"data": [[1.57836198E12, 170.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57836198E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 11.4, "minX": 1.57836198E12, "maxY": 159.26666666666668, "series": [{"data": [[1.57836198E12, 159.26666666666668]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.57836198E12, 11.4]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57836198E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 11.4, "minX": 1.57836198E12, "maxY": 159.26666666666668, "series": [{"data": [[1.57836198E12, 159.26666666666668]], "isOverall": false, "label": "example_1-success", "isController": false}, {"data": [[1.57836198E12, 11.4]], "isOverall": false, "label": "example_1-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57836198E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 11.4, "minX": 1.57836198E12, "maxY": 159.26666666666668, "series": [{"data": [[1.57836198E12, 159.26666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.57836198E12, 11.4]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57836198E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

